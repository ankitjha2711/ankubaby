2led with push button
* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/305d2a38-1f22-4d28-8a8c-ebcfbc86fd6c 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  bool led;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
 int pin1=2;
 int pin2=4;
void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
   pinMode(pin1,OUTPUT);
   pinMode(pin2,OUTPUT);
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here   
}


/*
  Since Led is READ_WRITE variable, onLedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedChange()  {
  // Add your code here to act upon Led change
  if(led==true){
    digitalWrite(pin1,HIGH);
    digitalWrite(pin2,HIGH);
    }
    
  else{
    digitalWrite(pin1,LOW);
    digitalWrite(pin2,LOW);
  }
}



This Arduino sketch controls two LEDs with a push button, which can be remotely controlled through the Arduino IoT Cloud. The objective of the experiment is to demonstrate how to connect an Arduino board to the cloud and control it remotely.

Theory:
This sketch uses the Arduino IoT Cloud service to create a Thing, which is essentially a virtual representation of the physical device (in this case, an Arduino board). The Thing has a READ/WRITE variable called "led," which is automatically generated and updated by the cloud when changes are made to the Thing.

The push button is connected to a digital input pin of the Arduino board, and the two LEDs are connected to two digital output pins. The onLedChange() function is called every time a new value is received from the cloud for the led variable. The function checks the value of led and turns on or off the two LEDs accordingly.
The ESP8266 is a low-cost Wi-Fi microchip with full TCP/IP stack and microcontroller capabilities. It can be used as a standalone device or as a slave device in a larger system. With its built-in Wi-Fi capabilities, it is a popular choice for IoT projects, as it can connect to the internet and other devices wirelessly.

In the context of the above question, the ESP8266 is likely being used as a microcontroller to control the LEDs and read the push button. The Arduino IoT Cloud platform is being used to remotely control the LED via the cloud.

The Arduino IoT Cloud platform allows for the creation of IoT devices that can be controlled and monitored remotely through the internet. It provides a simple interface for managing devices and data, and supports a variety of hardware platforms, including the ESP8266. By connecting to the cloud, the device can be controlled from anywhere with an internet connection.

The code provided initializes the ESP8266 and sets up two LED pins and a push button pin. When the LED variable in the Arduino IoT Cloud is changed, the onLedChange() function is called, which either turns the LEDs on or off based on the value of the LED variable. The loop() function calls ArduinoCloud.update() to ensure that the device stays connected to the cloud and receives any updates to the LED variable.

Overall, the objective of this experiment is to demonstrate how to use the ESP8266 and the Arduino IoT Cloud platform to create an IoT device that can be controlled remotely.
Architecture:
This experiment uses the Arduino IoT Cloud service, which connects the Arduino board to the cloud. The cloud service manages the communication between the board and the user interface, allowing the user to remotely control the board.

Algorithm:

Declare variables for the two LED pins and initialize them as digital outputs
Initialize the serial communication and wait for the port to open
Connect to the Arduino IoT Cloud service
Define the onLedChange() function, which is called every time a new value is received from the cloud for the led variable
In the onLedChange() function, check the value of led and turn on or off the two LEDs accordingly
In the loop() function, call ArduinoCloud.update() to update the cloud service and check for new values of led

