##### push button and motor control

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/eccd1c91-5d8b-4a9c-86e7-4458870985df 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  bool pressed;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

int pwm = 2;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  pinMode(pwm,OUTPUT);
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  
}


/*
  Since Pressed is READ_WRITE variable, onPressedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPressedChange()  {
  // Add your code here to act upon Pressed change
  if (pressed == true){
    analogWrite(pwm,255);
  }
  else{
    analogWrite(pwm,0);
  }
}

Objective:
The objective of this code is to connect a push button and control a motor based on the button press. When the button is pressed, the motor should turn on, and when it's released, the motor should turn off. This functionality is achieved by communicating the state of the button over the cloud using Arduino IoT Cloud, and then turning the motor on/off based on the received state.

Theory:
The code connects an Arduino board (either ESP or MKR1010) to the Arduino IoT Cloud using the ArduinoCloud.begin() function. It also initializes the properties defined in thingProperties.h using the initProperties() function.

The code sets up the pinMode for the motor output and defines the onPressedChange() function that will be called whenever the state of the button changes.

The onPressedChange() function reads the value of the pressed variable, which represents the state of the button, and turns the motor on or off based on the received state. If the button is pressed, the motor is turned on by calling the analogWrite() function with a value of 255, which sets the motor speed to its maximum. If the button is released, the motor is turned off by calling the analogWrite() function with a value of 0, which sets the motor speed to 0.

Algorithm:

Connect the push button to the Arduino board and the motor to the PWM pin.
Initialize the serial communication and wait for the port to open.
Initialize the cloud properties using the initProperties() function.
Connect to the Arduino IoT Cloud using ArduinoCloud.begin().
Set the debug message level and print debug information using setDebugMessageLevel() and ArduinoCloud.printDebugInfo().
Set the pinMode for the motor output.
Define the onPressedChange() function that will be called whenever the state of the button changes.
In onPressedChange() function, read the value of the pressed variable to determine the state of the button.
If the button is pressed, turn the motor on by calling the analogWrite() function with a value of 255.
If the button is released, turn the motor off by calling the analogWrite() function with a value of 0.
Update the cloud using ArduinoCloud.update() in the loop() function.
Upload the code to the Arduino board and monitor the motor behavior based on the button press.

Connection:
https://europe1.discourse-cdn.com/arduino/original/4X/d/1/a/d1a368340126157fa0a9fc545cccce132883b933.png

##### slider and motor control

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/bcdbfe62-9695-43e5-9193-3eb22ad7e65d 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int intensity;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

int pwm = 2;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  pinMode(pwm,OUTPUT);
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  
}


/*
  Since Intensity is READ_WRITE variable, onIntensityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onIntensityChange()  {
  // Add your code here to act upon Intensity change
  int out = map(intensity,0,255,0,255);
  analogWrite(pwm,out);
}

Objective: To connect a motor and control its speed using Arduino IoT Cloud.

Theory: In order to control the speed of a motor, we can use Pulse Width Modulation (PWM) technique. In this technique, we change the duty cycle of the digital signal that is sent to the motor. The duty cycle represents the percentage of time that the signal is high (ON) in one cycle. By changing the duty cycle, we can control the speed of the motor.

We can use the Arduino Uno, ESP8266 or MKR1010 boards to connect the motor and control its speed using Arduino IoT Cloud. We can create a READ/WRITE variable in the Cloud Thing for the motor speed, and update it from the Cloud Dashboard. Whenever the value of this variable is changed, the onIntensityChange() function is called, which changes the duty cycle of the PWM signal sent to the motor.

Algorithm:

Include the "thingProperties.h" header file in the sketch.
Declare a variable for the PWM pin.
Initialize the serial communication and wait for the port to open.
Call the initProperties() function to initialize the IoT Cloud variables.
Connect to the Arduino IoT Cloud using the ArduinoCloud.begin() function.
Set the debug message level using the setDebugMessageLevel() function.
Set the pinMode for the PWM pin as OUTPUT.
In the onIntensityChange() function, use the map() function to map the range of the variable to the range of the PWM signal.
Call the analogWrite() function with the mapped value as the second argument.
In the loop() function, call the ArduinoCloud.update() function to update the IoT Cloud variables.

Connection:
https://res.cloudinary.com/practicaldev/image/fetch/s--p6lfQ8Y2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/wia-flarum-bucket/2018-06-07/1528381887-132077-dc-motor-arduino-2.png

#### Buzzer slider

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/b4730263-b0cd-4dd9-bfa5-1bbf8e537b55 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float frequency;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

int pin = 2;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  pinMode(pin,OUTPUT);
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  
}


/*
  Since Frequency is READ_WRITE variable, onFrequencyChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFrequencyChange()  {
  // Add your code here to act upon Frequency change
  tone(pin, intensity);
  delay(1000);        // ...for 1 sec
  noTone(buzzer);     // Stop sound...
  delay(1000);        // ...for 1sec
}

Objective: The objective of this code is to control the frequency of a buzzer using the Arduino IoT Cloud service.

Theory: The code uses the "tone" function in Arduino to generate a specific frequency of sound on the buzzer. The frequency is received from the IoT Cloud service and stored in the "frequency" variable. The "onFrequencyChange" function is called every time the value of the "frequency" variable is updated on the IoT Cloud service. Inside the "onFrequencyChange" function, the "tone" function is called with the buzzer pin and the frequency value as parameters. This generates a sound on the buzzer with the specified frequency. The "noTone" function is then called to stop the sound after a delay of one second.

Algorithm:

Include the "thingProperties.h" header file.

Define a variable "pin" to store the buzzer pin number.

In the setup function:
a. Initialize serial communication.
b. Call the "initProperties" function to initialize the IoT Cloud service.
c. Connect to the IoT Cloud service using the "begin" function.
d. Set the debug message level and print the debug info.
e. Set the pin mode of the buzzer pin to OUTPUT.

In the loop function:
a. Call the "update" function to check for updates from the IoT Cloud service.

Define the "onFrequencyChange" function:
a. Inside the function, call the "tone" function with the buzzer pin and the frequency value as parameters.
b. Delay for one second.
c. Call the "noTone" function with the buzzer pin as parameter to stop the sound.

Save the code and upload it to the Arduino board.

/////////////////////////////////////////////////////
esp32 arcitecture : https://www.circuitschools.com/wp-content/uploads/2020/09/ESP-32-pinout-diagram.webp

2led with push button
* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/305d2a38-1f22-4d28-8a8c-ebcfbc86fd6c 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  bool led;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
 int pin1=2;
 int pin2=4;
void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
   pinMode(pin1,OUTPUT);
   pinMode(pin2,OUTPUT);
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here   
}


/*
  Since Led is READ_WRITE variable, onLedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedChange()  {
  // Add your code here to act upon Led change
  if(led==true){
    digitalWrite(pin1,HIGH);
    digitalWrite(pin2,HIGH);
    }
    
  else{
    digitalWrite(pin1,LOW);
    digitalWrite(pin2,LOW);
  }
}



This Arduino sketch controls two LEDs with a push button, which can be remotely controlled through the Arduino IoT Cloud. The objective of the experiment is to demonstrate how to connect an Arduino board to the cloud and control it remotely.

Theory:
This sketch uses the Arduino IoT Cloud service to create a Thing, which is essentially a virtual representation of the physical device (in this case, an Arduino board). The Thing has a READ/WRITE variable called "led," which is automatically generated and updated by the cloud when changes are made to the Thing.

The push button is connected to a digital input pin of the Arduino board, and the two LEDs are connected to two digital output pins. The onLedChange() function is called every time a new value is received from the cloud for the led variable. The function checks the value of led and turns on or off the two LEDs accordingly.
The ESP8266 is a low-cost Wi-Fi microchip with full TCP/IP stack and microcontroller capabilities. It can be used as a standalone device or as a slave device in a larger system. With its built-in Wi-Fi capabilities, it is a popular choice for IoT projects, as it can connect to the internet and other devices wirelessly.

In the context of the above question, the ESP8266 is likely being used as a microcontroller to control the LEDs and read the push button. The Arduino IoT Cloud platform is being used to remotely control the LED via the cloud.

The Arduino IoT Cloud platform allows for the creation of IoT devices that can be controlled and monitored remotely through the internet. It provides a simple interface for managing devices and data, and supports a variety of hardware platforms, including the ESP8266. By connecting to the cloud, the device can be controlled from anywhere with an internet connection.

The code provided initializes the ESP8266 and sets up two LED pins and a push button pin. When the LED variable in the Arduino IoT Cloud is changed, the onLedChange() function is called, which either turns the LEDs on or off based on the value of the LED variable. The loop() function calls ArduinoCloud.update() to ensure that the device stays connected to the cloud and receives any updates to the LED variable.

Overall, the objective of this experiment is to demonstrate how to use the ESP8266 and the Arduino IoT Cloud platform to create an IoT device that can be controlled remotely.
Architecture:
This experiment uses the Arduino IoT Cloud service, which connects the Arduino board to the cloud. The cloud service manages the communication between the board and the user interface, allowing the user to remotely control the board.

Algorithm:

Declare variables for the two LED pins and initialize them as digital outputs
Initialize the serial communication and wait for the port to open
Connect to the Arduino IoT Cloud service
Define the onLedChange() function, which is called every time a new value is received from the cloud for the led variable
In the onLedChange() function, check the value of led and turn on or off the two LEDs accordingly
In the loop() function, call ArduinoCloud.update() to update the cloud service and check for new values of led


////////////////////////////////////////////////////////////////////////////////////////
sine grpah
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/305d2a38-1f22-4d28-8a8c-ebcfbc86fd6c 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

 
  bool amplitude;
  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
 int pin1=2;
 void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
   pinMode(pin1,INPUT);
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  bool button = digitalRead(Pin1);
  float x = 0.0;
   if(button==HIGH){
     Serial.println("Hello");
     x = 2*3.14*1*1;
   amplitude = 10*asin(x);
  }
  else{
    amplitude = 0;
  }

  
}
This Arduino sketch reads the state of a push button connected to pin 2 and calculates the amplitude of a sine wave based on the button state. The amplitude value is assigned to the "amplitude" variable, which is a read-write variable in the Arduino IoT Cloud Thing.

The objective of the experiment is to demonstrate how to read the state of a push button and calculate a sine wave amplitude based on the button state, and how to communicate the amplitude value with the Arduino IoT Cloud service.

The architecture of the experiment includes an Arduino board connected to a push button on pin 2, and an IoT Cloud Thing with three variables, "graph", "intensity", and "led", which are automatically updated by the cloud when changes are made to the Thing. The "amplitude" variable is a read-write variable that can be updated from the cloud dashboard or by the Arduino sketch.

The algorithm of the code is as follows:

Initialize serial communication and wait for the serial monitor to open.
Set pin 2 as an input pin.
Initialize the IoT Cloud Thing properties.
Connect to the Arduino IoT Cloud.
Set the debug message level and print debug information.
In the loop function, update the Arduino IoT Cloud service.
Read the state of the push button connected to pin 2.
Calculate the amplitude of the sine wave based on the button state.
Assign the amplitude value to the "amplitude" variable.
If the button is not pressed, set the amplitude value to 0.

/////////////////////////////////////////////////////////
intensity led
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/5477a5d8-862c-4f34-b349-79c229518f69 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float intensity;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
 int pin1=2;
void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  pinMode(pin1,OUTPUT);
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  
}


/*
  Since Intensity is READ_WRITE variable, onIntensityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onIntensityChange()  {
  // Add your code here to act upon Intensity change
  analogWrite(pin1,intensity);
}
This is an Arduino sketch designed for the ESP32 microcontroller to interface with the Arduino IoT Cloud platform. The purpose of this experiment appears to be to control the intensity of an output signal using a variable controlled by the cloud.

The sketch initializes a variable called "intensity", which is marked as READ/WRITE in the Arduino IoT Cloud. When the value of this variable changes on the cloud dashboard, the "onIntensityChange()" function is executed, which updates the intensity value in the code and outputs a corresponding analog signal on a pin called "pin2". However, it appears that there is a mistake in the code and the pin being set as an output is actually "pin1".

The architecture of this experiment is based on the ESP32 microcontroller interfacing with the Arduino IoT Cloud platform. The ESP32 is connected to the internet and uses the ArduinoCloud library to establish a connection with the cloud. The cloud dashboard is used to monitor and control the intensity value, which is sent to the ESP32 over the internet.

The algorithm of the code is simple. In the setup() function, the serial communication is initialized, the pinMode for the output pin is set, and the Arduino IoT Cloud connection is established. In the loop() function, the ArduinoCloud.update() function is called to check for updates from the cloud. The onIntensityChange() function is called every time the value of the "intensity" variable changes in the cloud dashboard. This function updates the intensity value in the code and outputs a corresponding analog signal on the "pin2" pin.
Here is the algorithm for the provided code, with a brief explanation of each line:

Include the header file "thingProperties.h" which contains definitions for the variables and functions generated by the Arduino IoT Cloud.
Define a global variable 'pin1' and set it to 2.
In the 'setup' function, initialize the serial communication at a baud rate of 9600, and set a delay of 1500ms to wait for a serial monitor to open. Set 'pin1' as an output pin.
Initialize the properties defined in "thingProperties.h".
Begin the connection to the Arduino IoT Cloud using the preferred connection method specified in the ArduinoIoTPreferredConnection variable.
Set the debug message level to 2, and print the debug information to the serial monitor.
In the 'loop' function, call the 'update' function to check for updates from the Arduino IoT Cloud.
The 'onIntensityChange' function is executed every time a new value is received for the 'intensity' variable from the IoT Cloud. It sets the PWM output of 'pin1' to the received value of 'intensity'.
The main function loop continues to run and waits for further updates from the IoT Cloud.
Overall, the code aims to receive updates for the 'intensity' variable from the Arduino IoT Cloud and set the PWM output of 'pin1' accordingly.