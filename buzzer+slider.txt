/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/b4730263-b0cd-4dd9-bfa5-1bbf8e537b55 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float frequency;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

int pin = 2;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  pinMode(pin,OUTPUT);
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  
}


/*
  Since Frequency is READ_WRITE variable, onFrequencyChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFrequencyChange()  {
  // Add your code here to act upon Frequency change
  tone(pin, intensity);
  delay(1000);        // ...for 1 sec
  noTone(buzzer);     // Stop sound...
  delay(1000);        // ...for 1sec
}

Objective: The objective of this code is to control the frequency of a buzzer using the Arduino IoT Cloud service.

Theory: The code uses the "tone" function in Arduino to generate a specific frequency of sound on the buzzer. The frequency is received from the IoT Cloud service and stored in the "frequency" variable. The "onFrequencyChange" function is called every time the value of the "frequency" variable is updated on the IoT Cloud service. Inside the "onFrequencyChange" function, the "tone" function is called with the buzzer pin and the frequency value as parameters. This generates a sound on the buzzer with the specified frequency. The "noTone" function is then called to stop the sound after a delay of one second.

Algorithm:

Include the "thingProperties.h" header file.

Define a variable "pin" to store the buzzer pin number.

In the setup function:
a. Initialize serial communication.
b. Call the "initProperties" function to initialize the IoT Cloud service.
c. Connect to the IoT Cloud service using the "begin" function.
d. Set the debug message level and print the debug info.
e. Set the pin mode of the buzzer pin to OUTPUT.

In the loop function:
a. Call the "update" function to check for updates from the IoT Cloud service.

Define the "onFrequencyChange" function:
a. Inside the function, call the "tone" function with the buzzer pin and the frequency value as parameters.
b. Delay for one second.
c. Call the "noTone" function with the buzzer pin as parameter to stop the sound.

Save the code and upload it to the Arduino board.